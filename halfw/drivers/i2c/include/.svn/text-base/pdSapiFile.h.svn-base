/*******************************************************************************
* FileName : pdSapiFile.h
* Description : This file contains sapi for file function declarations,
* 		datastructures and external includes.
*******************************************************************************/
#ifndef PDSAPISAPI_FILE_H
#define PDSAPISAPI_FILE_H
/*******************************************************************************
*******************************************************************************/
/*============================================================================*/
/* INCLUDES */
/*============================================================================*/
#include <stdio.h>
#include "pdErrorTypes.h"
#include "linux/types.h"
#include "pdMacros.h"

/*============================================================================*/
/* EXPORTED TYPES & DEFINES */

#ifndef ZERO
#define ZERO 0
#endif

#ifndef uint
typedef unsigned int uint;
#endif

//#ifndef size_t
//#define size_t
//typedef unsigned long size_t;
//#endif

#define MAX_FILE_OPEN_ALLOWED 255

extern int errno;
/*============================================================================*/

/*============================================================================*/
/* PRIVATE DATA */

/* This private data is applicable only for internal header file */
/*============================================================================*/

/*============================================================================*/
/* EXPORTED FUNCTION PROTOTYPES */
/*============================================================================*/

/*==============================================================================
* @START
* Function:pdSapiFile_init
* IN : int pfFileNumber	//	Every file will have a internal file number to have mutex initialization
* OUT : None
* PRE : None
* POST : None
* RETURN :
*	   PD_OK	-	On success
*	   PD_FALIURE	-	On failure
*	   PD_REACHED_FILE_OPEN_LIMIT	-	Number of files opened reached max limit
* INFO : Create a mutex for file related operations.

* @END
*============================================================================*/

int pdSapiFile_init(int pdFileNumber);

/*==============================================================================
* @START
* Function:pdSapiFile_open
* IN : const char *path - path with file name to be created.
* 		const char *mode - file to be open in provided mode.
* 		FILE *fp - pointer to file created.
* 		int pdFileNumber	-	Unique file number to every file.
* OUT : File *fp
* PRE : None
* POST : None
* RETURN :
*	   PD_OK	-	on success
*	   PD_FALIURE	-	on failure
*	   PD_RESOURCE_BUSY	-	if mutex is acquired by other thread or process.
*	   PD_EINVAL	-	Invalid argument.
* INFO : Create a file and return file pointer.

* @END
*============================================================================*/

int pdSapiFile_open(const char *path, const char *mode, FILE **fp, int pdFileNumber);

/*==============================================================================
* @START
* Function:pdSapiFile_read
* IN : void *ptr - pointer to data read.
* 		unit size - Size of each element to be read.
* 		size_t count - Number of bytes to be read.
* 		FILE * stream - pointer to file.
* 		size_t *const bytesRead - Number of bytes read after fileread.
* 		int pdFileNumber	-	Unique file number to every file.
* OUT : size_t *const bytesRead
* PRE : None
* POST : None
* RETURN :
*	   PD_OK	-	 on success
*	   PD_FALIURE	-	 on failure
*	   PD_RESOURCE_BUSY	-	 if mutex is acquired by other thread or process.
*	   PD_EINVAL	-	Invalid argument.
* INFO : Read count bytes from file.

* @END
*============================================================================*/

int pdSapiFile_read(void *ptr, int size, size_t count, FILE *stream, size_t *const bytesRead, int pdFileNumber);

/*==============================================================================
* @START
* Function:pdSapiFile_write
* IN : void *ptr - pointer to data to be written.
* 		const size_t size - Size of each element to be written.
* 		const size_t nmemb - Number of bytes to be written.
* 		FILE * stream - pointer to file.
* 		size_t *const bytesWritten - Number of bytes written.
* 		int pdFileNumber	-	Unique file number to every file.
* OUT : size_t *const bytesWritten
* PRE : None
* POST : None
* RETURN :
*	   PD_OK on success
*	   PD_FALIURE on failure
*	   PD_RESOURCE_BUSY	-	 if mutex is acquired by other thread or process.
*	   PD_EINVAL	-	Invalid argument.
* INFO : write nmemb bytes to file.

* @END
*============================================================================*/

int pdSapiFile_write(const void *ptr, int size,  size_t nmemb, FILE *stream, size_t bytesWritten, int pdFileNumber);

/*==============================================================================
* @START
* Function:pdSapiFile_close
* IN : 	FILE * fp - pointer to file.
* 		int pdFileNumber	-	Unique file number to every file.
* OUT : None
* PRE : None
* POST : None
* RETURN :
*	   PD_OK	-	on success
*	   PD_FALIURE	-	on failure
*	   PD_RESOURCE_BUSY	-	 if mutex is acquired by other thread or process.
*	   PD_EINVAL	-	Invalid argument.
* INFO : flush and close the file.

* @END
*============================================================================*/

int pdSapiFile_close(FILE *fp, int pdFileNumber);

/*==============================================================================
* @START
* Function:pdSapiFile_seek
* IN : FILE *fp - pointer to file.
* 		long int	-	 offset - Offset number to move from the origin.
* 		int origin	-	SEEK_SET	Beginning of file
						SEEK_CUR	Current position of the file pointer
						SEEK_END	End of file *
* 		int pdFileNumber	-	Unique file number to every file.
* OUT : None
* PRE : Below APIs to be called before pdSapiFile_read()
* 		pdSapiFile_init()
* 		pdSapiFile_open()
* POST : Current position of file pointer in file is changed.
* RETURN :
*	   PD_OK	-	on success
*	   PD_FALIURE	-	on failure
*	   PD_FAILED_TO_SEEK_FILE	-	If fseek() call failed.
*	   PD_RESOURCE_BUSY	-	 if mutex is acquired by other thread or process.
*	   PD_EINVAL	-	Invalid argument.
* INFO : Append count bytes to file.

* @END
*============================================================================*/

int pdSapiFile_seek(FILE *fp, long int offset, int origin, int pdFileNumber);

/*==============================================================================
* @START
* Function:pdSapiFile_append
* IN : FILE *fp - pointer to file.
* 		const size_t count - Size of each element to be written.
* 		const void *ptr - pointer to bytes to be written.
* 		size_t *const bytesWritten - Number of bytes written.
* 		int pdFileNumber	-	Unique file number to every file.
* OUT : size_t *const bytesWritten
* PRE : None
* POST : None
* RETURN :
*	   PD_OK	-	on success
*	   PD_FALIURE	-	on failure
*	   PD_RESOURCE_BUSY	-	 if mutex is acquired by other thread or process.
*	   PD_EINVAL	-	Invalid argument.
* INFO : Append count bytes to file.

* @END
*============================================================================*/

int pdSapiFile_append(FILE *fp, const int count, const void *ptr, size_t *const bytesWritten, int pdFileNumber);

/*==============================================================================
* @START
* Function:pdSapiFile_flush
* IN : FILE *fp - pointer to file.
* 		int pdFileNumber	-	Unique file number to every file.
* OUT : None
* PRE : None
* POST : None
* RETURN :
*	   PD_OK	-	on success
*	   PD_FALIURE	-	on failure
*	   PD_RESOURCE_BUSY	-	 if mutex is acquired by other thread or process.
*	   PD_EINVAL	-	Invalid argument.
* INFO : Flush the file.

* @END
*============================================================================*/

int pdSapiFile_flush(FILE * stream, int pdFileNumber);

#endif		/*PDSAPISAPI_FILE_H*/

